// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_center_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_center_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_center_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_center_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_center_5fservice_2eproto;
namespace edgefs {
class PullReply;
class PullReplyDefaultTypeInternal;
extern PullReplyDefaultTypeInternal _PullReply_default_instance_;
class PullReply_Chunck;
class PullReply_ChunckDefaultTypeInternal;
extern PullReply_ChunckDefaultTypeInternal _PullReply_Chunck_default_instance_;
class PullRequest;
class PullRequestDefaultTypeInternal;
extern PullRequestDefaultTypeInternal _PullRequest_default_instance_;
class StatReply;
class StatReplyDefaultTypeInternal;
extern StatReplyDefaultTypeInternal _StatReply_default_instance_;
class StatRequest;
class StatRequestDefaultTypeInternal;
extern StatRequestDefaultTypeInternal _StatRequest_default_instance_;
}  // namespace edgefs
PROTOBUF_NAMESPACE_OPEN
template<> ::edgefs::PullReply* Arena::CreateMaybeMessage<::edgefs::PullReply>(Arena*);
template<> ::edgefs::PullReply_Chunck* Arena::CreateMaybeMessage<::edgefs::PullReply_Chunck>(Arena*);
template<> ::edgefs::PullRequest* Arena::CreateMaybeMessage<::edgefs::PullRequest>(Arena*);
template<> ::edgefs::StatReply* Arena::CreateMaybeMessage<::edgefs::StatReply>(Arena*);
template<> ::edgefs::StatRequest* Arena::CreateMaybeMessage<::edgefs::StatRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace edgefs {

// ===================================================================

class PullRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgefs.PullRequest) */ {
 public:
  inline PullRequest() : PullRequest(nullptr) {};
  virtual ~PullRequest();

  PullRequest(const PullRequest& from);
  PullRequest(PullRequest&& from) noexcept
    : PullRequest() {
    *this = ::std::move(from);
  }

  inline PullRequest& operator=(const PullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullRequest& operator=(PullRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullRequest* internal_default_instance() {
    return reinterpret_cast<const PullRequest*>(
               &_PullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PullRequest& a, PullRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullRequest* New() const final {
    return CreateMaybeMessage<PullRequest>(nullptr);
  }

  PullRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullRequest& from);
  void MergeFrom(const PullRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgefs.PullRequest";
  }
  protected:
  explicit PullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_center_5fservice_2eproto);
    return ::descriptor_table_center_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrPathFieldNumber = 1,
    kPrTimeFieldNumber = 2,
    kChunckSizeFieldNumber = 3,
    kStartChunckFieldNumber = 4,
    kChuncksNumFieldNumber = 5,
  };
  // string pr_path = 1;
  void clear_pr_path();
  const std::string& pr_path() const;
  void set_pr_path(const std::string& value);
  void set_pr_path(std::string&& value);
  void set_pr_path(const char* value);
  void set_pr_path(const char* value, size_t size);
  std::string* mutable_pr_path();
  std::string* release_pr_path();
  void set_allocated_pr_path(std::string* pr_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pr_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pr_path(
      std::string* pr_path);
  private:
  const std::string& _internal_pr_path() const;
  void _internal_set_pr_path(const std::string& value);
  std::string* _internal_mutable_pr_path();
  public:

  // int64 pr_time = 2;
  void clear_pr_time();
  ::PROTOBUF_NAMESPACE_ID::int64 pr_time() const;
  void set_pr_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pr_time() const;
  void _internal_set_pr_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 chunck_size = 3;
  void clear_chunck_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunck_size() const;
  void set_chunck_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunck_size() const;
  void _internal_set_chunck_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 start_chunck = 4;
  void clear_start_chunck();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_chunck() const;
  void set_start_chunck(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_chunck() const;
  void _internal_set_start_chunck(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 chuncks_num = 5;
  void clear_chuncks_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 chuncks_num() const;
  void set_chuncks_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chuncks_num() const;
  void _internal_set_chuncks_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:edgefs.PullRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pr_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 pr_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunck_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_chunck_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chuncks_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_center_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PullReply_Chunck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgefs.PullReply.Chunck) */ {
 public:
  inline PullReply_Chunck() : PullReply_Chunck(nullptr) {};
  virtual ~PullReply_Chunck();

  PullReply_Chunck(const PullReply_Chunck& from);
  PullReply_Chunck(PullReply_Chunck&& from) noexcept
    : PullReply_Chunck() {
    *this = ::std::move(from);
  }

  inline PullReply_Chunck& operator=(const PullReply_Chunck& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullReply_Chunck& operator=(PullReply_Chunck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullReply_Chunck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullReply_Chunck* internal_default_instance() {
    return reinterpret_cast<const PullReply_Chunck*>(
               &_PullReply_Chunck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PullReply_Chunck& a, PullReply_Chunck& b) {
    a.Swap(&b);
  }
  inline void Swap(PullReply_Chunck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullReply_Chunck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullReply_Chunck* New() const final {
    return CreateMaybeMessage<PullReply_Chunck>(nullptr);
  }

  PullReply_Chunck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullReply_Chunck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullReply_Chunck& from);
  void MergeFrom(const PullReply_Chunck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullReply_Chunck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgefs.PullReply.Chunck";
  }
  protected:
  explicit PullReply_Chunck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_center_5fservice_2eproto);
    return ::descriptor_table_center_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kChunckNoFieldNumber = 1,
  };
  // string data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 chunck_no = 1;
  void clear_chunck_no();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunck_no() const;
  void set_chunck_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunck_no() const;
  void _internal_set_chunck_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:edgefs.PullReply.Chunck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunck_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_center_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PullReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgefs.PullReply) */ {
 public:
  inline PullReply() : PullReply(nullptr) {};
  virtual ~PullReply();

  PullReply(const PullReply& from);
  PullReply(PullReply&& from) noexcept
    : PullReply() {
    *this = ::std::move(from);
  }

  inline PullReply& operator=(const PullReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullReply& operator=(PullReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullReply* internal_default_instance() {
    return reinterpret_cast<const PullReply*>(
               &_PullReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PullReply& a, PullReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PullReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullReply* New() const final {
    return CreateMaybeMessage<PullReply>(nullptr);
  }

  PullReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullReply& from);
  void MergeFrom(const PullReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgefs.PullReply";
  }
  protected:
  explicit PullReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_center_5fservice_2eproto);
    return ::descriptor_table_center_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PullReply_Chunck Chunck;

  // accessors -------------------------------------------------------

  enum : int {
    kChuncksFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // repeated .edgefs.PullReply.Chunck chuncks = 2;
  int chuncks_size() const;
  private:
  int _internal_chuncks_size() const;
  public:
  void clear_chuncks();
  ::edgefs::PullReply_Chunck* mutable_chuncks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgefs::PullReply_Chunck >*
      mutable_chuncks();
  private:
  const ::edgefs::PullReply_Chunck& _internal_chuncks(int index) const;
  ::edgefs::PullReply_Chunck* _internal_add_chuncks();
  public:
  const ::edgefs::PullReply_Chunck& chuncks(int index) const;
  ::edgefs::PullReply_Chunck* add_chuncks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgefs::PullReply_Chunck >&
      chuncks() const;

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:edgefs.PullReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgefs::PullReply_Chunck > chuncks_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_center_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgefs.StatRequest) */ {
 public:
  inline StatRequest() : StatRequest(nullptr) {};
  virtual ~StatRequest();

  StatRequest(const StatRequest& from);
  StatRequest(StatRequest&& from) noexcept
    : StatRequest() {
    *this = ::std::move(from);
  }

  inline StatRequest& operator=(const StatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatRequest& operator=(StatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatRequest* internal_default_instance() {
    return reinterpret_cast<const StatRequest*>(
               &_StatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StatRequest& a, StatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatRequest* New() const final {
    return CreateMaybeMessage<StatRequest>(nullptr);
  }

  StatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatRequest& from);
  void MergeFrom(const StatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgefs.StatRequest";
  }
  protected:
  explicit StatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_center_5fservice_2eproto);
    return ::descriptor_table_center_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrPathFieldNumber = 1,
  };
  // string pr_path = 1;
  void clear_pr_path();
  const std::string& pr_path() const;
  void set_pr_path(const std::string& value);
  void set_pr_path(std::string&& value);
  void set_pr_path(const char* value);
  void set_pr_path(const char* value, size_t size);
  std::string* mutable_pr_path();
  std::string* release_pr_path();
  void set_allocated_pr_path(std::string* pr_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pr_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pr_path(
      std::string* pr_path);
  private:
  const std::string& _internal_pr_path() const;
  void _internal_set_pr_path(const std::string& value);
  std::string* _internal_mutable_pr_path();
  public:

  // @@protoc_insertion_point(class_scope:edgefs.StatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pr_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_center_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:edgefs.StatReply) */ {
 public:
  inline StatReply() : StatReply(nullptr) {};
  virtual ~StatReply();

  StatReply(const StatReply& from);
  StatReply(StatReply&& from) noexcept
    : StatReply() {
    *this = ::std::move(from);
  }

  inline StatReply& operator=(const StatReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatReply& operator=(StatReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatReply* internal_default_instance() {
    return reinterpret_cast<const StatReply*>(
               &_StatReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatReply& a, StatReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StatReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatReply* New() const final {
    return CreateMaybeMessage<StatReply>(nullptr);
  }

  StatReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatReply& from);
  void MergeFrom(const StatReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "edgefs.StatReply";
  }
  protected:
  explicit StatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_center_5fservice_2eproto);
    return ::descriptor_table_center_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLenFieldNumber = 2,
    kMtimeFieldNumber = 3,
    kOkFieldNumber = 1,
  };
  // uint64 len = 2;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 mtime = 3;
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int64 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:edgefs.StatReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::int64 mtime_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_center_5fservice_2eproto;
};
// ===================================================================

class CenterService_Stub;

class CenterService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CenterService() {};
 public:
  virtual ~CenterService();

  typedef CenterService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void PULL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::edgefs::PullRequest* request,
                       ::edgefs::PullReply* response,
                       ::google::protobuf::Closure* done);
  virtual void Stat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::edgefs::StatRequest* request,
                       ::edgefs::StatReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CenterService);
};

class CenterService_Stub : public CenterService {
 public:
  CenterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CenterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CenterService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CenterService ------------------------------------------

  void PULL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::edgefs::PullRequest* request,
                       ::edgefs::PullReply* response,
                       ::google::protobuf::Closure* done);
  void Stat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::edgefs::StatRequest* request,
                       ::edgefs::StatReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CenterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PullRequest

// string pr_path = 1;
inline void PullRequest::clear_pr_path() {
  pr_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PullRequest::pr_path() const {
  // @@protoc_insertion_point(field_get:edgefs.PullRequest.pr_path)
  return _internal_pr_path();
}
inline void PullRequest::set_pr_path(const std::string& value) {
  _internal_set_pr_path(value);
  // @@protoc_insertion_point(field_set:edgefs.PullRequest.pr_path)
}
inline std::string* PullRequest::mutable_pr_path() {
  // @@protoc_insertion_point(field_mutable:edgefs.PullRequest.pr_path)
  return _internal_mutable_pr_path();
}
inline const std::string& PullRequest::_internal_pr_path() const {
  return pr_path_.Get();
}
inline void PullRequest::_internal_set_pr_path(const std::string& value) {
  
  pr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PullRequest::set_pr_path(std::string&& value) {
  
  pr_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgefs.PullRequest.pr_path)
}
inline void PullRequest::set_pr_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:edgefs.PullRequest.pr_path)
}
inline void PullRequest::set_pr_path(const char* value,
    size_t size) {
  
  pr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgefs.PullRequest.pr_path)
}
inline std::string* PullRequest::_internal_mutable_pr_path() {
  
  return pr_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PullRequest::release_pr_path() {
  // @@protoc_insertion_point(field_release:edgefs.PullRequest.pr_path)
  return pr_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PullRequest::set_allocated_pr_path(std::string* pr_path) {
  if (pr_path != nullptr) {
    
  } else {
    
  }
  pr_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pr_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgefs.PullRequest.pr_path)
}
inline std::string* PullRequest::unsafe_arena_release_pr_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:edgefs.PullRequest.pr_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pr_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PullRequest::unsafe_arena_set_allocated_pr_path(
    std::string* pr_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pr_path != nullptr) {
    
  } else {
    
  }
  pr_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pr_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgefs.PullRequest.pr_path)
}

// int64 pr_time = 2;
inline void PullRequest::clear_pr_time() {
  pr_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PullRequest::_internal_pr_time() const {
  return pr_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PullRequest::pr_time() const {
  // @@protoc_insertion_point(field_get:edgefs.PullRequest.pr_time)
  return _internal_pr_time();
}
inline void PullRequest::_internal_set_pr_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pr_time_ = value;
}
inline void PullRequest::set_pr_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pr_time(value);
  // @@protoc_insertion_point(field_set:edgefs.PullRequest.pr_time)
}

// uint64 chunck_size = 3;
inline void PullRequest::clear_chunck_size() {
  chunck_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullRequest::_internal_chunck_size() const {
  return chunck_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullRequest::chunck_size() const {
  // @@protoc_insertion_point(field_get:edgefs.PullRequest.chunck_size)
  return _internal_chunck_size();
}
inline void PullRequest::_internal_set_chunck_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunck_size_ = value;
}
inline void PullRequest::set_chunck_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunck_size(value);
  // @@protoc_insertion_point(field_set:edgefs.PullRequest.chunck_size)
}

// uint64 start_chunck = 4;
inline void PullRequest::clear_start_chunck() {
  start_chunck_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullRequest::_internal_start_chunck() const {
  return start_chunck_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullRequest::start_chunck() const {
  // @@protoc_insertion_point(field_get:edgefs.PullRequest.start_chunck)
  return _internal_start_chunck();
}
inline void PullRequest::_internal_set_start_chunck(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_chunck_ = value;
}
inline void PullRequest::set_start_chunck(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_chunck(value);
  // @@protoc_insertion_point(field_set:edgefs.PullRequest.start_chunck)
}

// uint64 chuncks_num = 5;
inline void PullRequest::clear_chuncks_num() {
  chuncks_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullRequest::_internal_chuncks_num() const {
  return chuncks_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullRequest::chuncks_num() const {
  // @@protoc_insertion_point(field_get:edgefs.PullRequest.chuncks_num)
  return _internal_chuncks_num();
}
inline void PullRequest::_internal_set_chuncks_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chuncks_num_ = value;
}
inline void PullRequest::set_chuncks_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chuncks_num(value);
  // @@protoc_insertion_point(field_set:edgefs.PullRequest.chuncks_num)
}

// -------------------------------------------------------------------

// PullReply_Chunck

// uint64 chunck_no = 1;
inline void PullReply_Chunck::clear_chunck_no() {
  chunck_no_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullReply_Chunck::_internal_chunck_no() const {
  return chunck_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PullReply_Chunck::chunck_no() const {
  // @@protoc_insertion_point(field_get:edgefs.PullReply.Chunck.chunck_no)
  return _internal_chunck_no();
}
inline void PullReply_Chunck::_internal_set_chunck_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunck_no_ = value;
}
inline void PullReply_Chunck::set_chunck_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunck_no(value);
  // @@protoc_insertion_point(field_set:edgefs.PullReply.Chunck.chunck_no)
}

// string data = 2;
inline void PullReply_Chunck::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PullReply_Chunck::data() const {
  // @@protoc_insertion_point(field_get:edgefs.PullReply.Chunck.data)
  return _internal_data();
}
inline void PullReply_Chunck::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:edgefs.PullReply.Chunck.data)
}
inline std::string* PullReply_Chunck::mutable_data() {
  // @@protoc_insertion_point(field_mutable:edgefs.PullReply.Chunck.data)
  return _internal_mutable_data();
}
inline const std::string& PullReply_Chunck::_internal_data() const {
  return data_.Get();
}
inline void PullReply_Chunck::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PullReply_Chunck::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgefs.PullReply.Chunck.data)
}
inline void PullReply_Chunck::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:edgefs.PullReply.Chunck.data)
}
inline void PullReply_Chunck::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgefs.PullReply.Chunck.data)
}
inline std::string* PullReply_Chunck::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PullReply_Chunck::release_data() {
  // @@protoc_insertion_point(field_release:edgefs.PullReply.Chunck.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PullReply_Chunck::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgefs.PullReply.Chunck.data)
}
inline std::string* PullReply_Chunck::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:edgefs.PullReply.Chunck.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PullReply_Chunck::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgefs.PullReply.Chunck.data)
}

// -------------------------------------------------------------------

// PullReply

// bool ok = 1;
inline void PullReply::clear_ok() {
  ok_ = false;
}
inline bool PullReply::_internal_ok() const {
  return ok_;
}
inline bool PullReply::ok() const {
  // @@protoc_insertion_point(field_get:edgefs.PullReply.ok)
  return _internal_ok();
}
inline void PullReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void PullReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:edgefs.PullReply.ok)
}

// repeated .edgefs.PullReply.Chunck chuncks = 2;
inline int PullReply::_internal_chuncks_size() const {
  return chuncks_.size();
}
inline int PullReply::chuncks_size() const {
  return _internal_chuncks_size();
}
inline void PullReply::clear_chuncks() {
  chuncks_.Clear();
}
inline ::edgefs::PullReply_Chunck* PullReply::mutable_chuncks(int index) {
  // @@protoc_insertion_point(field_mutable:edgefs.PullReply.chuncks)
  return chuncks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgefs::PullReply_Chunck >*
PullReply::mutable_chuncks() {
  // @@protoc_insertion_point(field_mutable_list:edgefs.PullReply.chuncks)
  return &chuncks_;
}
inline const ::edgefs::PullReply_Chunck& PullReply::_internal_chuncks(int index) const {
  return chuncks_.Get(index);
}
inline const ::edgefs::PullReply_Chunck& PullReply::chuncks(int index) const {
  // @@protoc_insertion_point(field_get:edgefs.PullReply.chuncks)
  return _internal_chuncks(index);
}
inline ::edgefs::PullReply_Chunck* PullReply::_internal_add_chuncks() {
  return chuncks_.Add();
}
inline ::edgefs::PullReply_Chunck* PullReply::add_chuncks() {
  // @@protoc_insertion_point(field_add:edgefs.PullReply.chuncks)
  return _internal_add_chuncks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::edgefs::PullReply_Chunck >&
PullReply::chuncks() const {
  // @@protoc_insertion_point(field_list:edgefs.PullReply.chuncks)
  return chuncks_;
}

// -------------------------------------------------------------------

// StatRequest

// string pr_path = 1;
inline void StatRequest::clear_pr_path() {
  pr_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatRequest::pr_path() const {
  // @@protoc_insertion_point(field_get:edgefs.StatRequest.pr_path)
  return _internal_pr_path();
}
inline void StatRequest::set_pr_path(const std::string& value) {
  _internal_set_pr_path(value);
  // @@protoc_insertion_point(field_set:edgefs.StatRequest.pr_path)
}
inline std::string* StatRequest::mutable_pr_path() {
  // @@protoc_insertion_point(field_mutable:edgefs.StatRequest.pr_path)
  return _internal_mutable_pr_path();
}
inline const std::string& StatRequest::_internal_pr_path() const {
  return pr_path_.Get();
}
inline void StatRequest::_internal_set_pr_path(const std::string& value) {
  
  pr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatRequest::set_pr_path(std::string&& value) {
  
  pr_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:edgefs.StatRequest.pr_path)
}
inline void StatRequest::set_pr_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:edgefs.StatRequest.pr_path)
}
inline void StatRequest::set_pr_path(const char* value,
    size_t size) {
  
  pr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:edgefs.StatRequest.pr_path)
}
inline std::string* StatRequest::_internal_mutable_pr_path() {
  
  return pr_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatRequest::release_pr_path() {
  // @@protoc_insertion_point(field_release:edgefs.StatRequest.pr_path)
  return pr_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatRequest::set_allocated_pr_path(std::string* pr_path) {
  if (pr_path != nullptr) {
    
  } else {
    
  }
  pr_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pr_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:edgefs.StatRequest.pr_path)
}
inline std::string* StatRequest::unsafe_arena_release_pr_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:edgefs.StatRequest.pr_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pr_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatRequest::unsafe_arena_set_allocated_pr_path(
    std::string* pr_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pr_path != nullptr) {
    
  } else {
    
  }
  pr_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pr_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:edgefs.StatRequest.pr_path)
}

// -------------------------------------------------------------------

// StatReply

// bool ok = 1;
inline void StatReply::clear_ok() {
  ok_ = false;
}
inline bool StatReply::_internal_ok() const {
  return ok_;
}
inline bool StatReply::ok() const {
  // @@protoc_insertion_point(field_get:edgefs.StatReply.ok)
  return _internal_ok();
}
inline void StatReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void StatReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:edgefs.StatReply.ok)
}

// uint64 len = 2;
inline void StatReply::clear_len() {
  len_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatReply::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatReply::len() const {
  // @@protoc_insertion_point(field_get:edgefs.StatReply.len)
  return _internal_len();
}
inline void StatReply::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  len_ = value;
}
inline void StatReply::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:edgefs.StatReply.len)
}

// int64 mtime = 3;
inline void StatReply::clear_mtime() {
  mtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatReply::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatReply::mtime() const {
  // @@protoc_insertion_point(field_get:edgefs.StatReply.mtime)
  return _internal_mtime();
}
inline void StatReply::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mtime_ = value;
}
inline void StatReply::set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:edgefs.StatReply.mtime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace edgefs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_center_5fservice_2eproto
